akka {
  loglevel = "DEBUG"
  log-dead-letters = on
  persistence{
    journal{
      plugin = "akka.persistence.journal.leveldb"
    }
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  }
  actor {
    #allow-java-serialization = off     #snapshot in default use java serialization.
    warn-about-java-serializer-usage = true
    debug{
      lifecycle = off
      unhandled = on
    }
    provider = cluster

    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      myperser = "tv.anypoint.jonathan.persistence.v1.serializer.MyPersistenceSerializer"

      #test = "jonathan.ask.serializer.MyOwnSerializer"
    }
    serialization-bindings {
      "java.lang.String" = java
      "com.google.protobuf.Message" = proto

      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$ChatMessage" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$ConnectAck" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$ConnectReq" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$ConnectReqAck" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$ByeMessage" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$ReceiveAck" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$AskCurrentUsers" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$CurrentUsers" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$Debug" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$PreConnected" = myperser
      "tv.anypoint.jonathan.serialization.MyPersistenceMessages$JoinMessage" = myperser
      # below bindings are just for testing
      #"jonathan.ask.serializer.MyOwnSerializable" = myown
      #"jonathan.ask.java.serializer.AskReplyMessage$AskMessage" = test
      #"jonathan.ask.java.serializer.AskReplyMessage$ReplyMessage" = test
    }
  }
  remote {
    log-remote-lifecycle-events = off

    netty.tcp {
      hostname = "127.0.0.1"
      port = ${PORT}
    }
    #artery{
    #  enabled = on
    #  transport = tcp
    #  canonical.hostname = "127.0.0.1"
    #  canonical.port = ${PORT}
    #}

    use-passive-connections=off
  }

  cluster {
    seed-nodes = [
        #for netty, use akka.tcp://
      "akka.tcp://ClusterSystem@127.0.0.1:2551"
      ,"akka.tcp://ClusterSystem@127.0.0.1:2552"
      ,"akka.tcp://ClusterSystem@127.0.0.1:2553"]
    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    #auto-down-unreachable-after = 10s
    #downing-provider-class = "com.lightbend.akka.sbr.SplitBrainResolverProvider"
    jmx.multi-mbeans-in-same-jvm = on
    #downing-provider-class = "com.swissborg.lithium.DowningProviderImpl"
    #downing-provider-class = "com.lightbend.akka.sbr.SplitBrainResolverProvider"
    pub-sub{
        # Actor name of the mediator actor, /system/distributedPubSubMediator
        name = distributedPubSubMediator

        # Start the mediator on members tagged with this role.
        # All members are used if undefined or empty.
        role = ""

        # The routing logic to use for 'Send'
        # Possible values: random, round-robin, broadcast
        routing-logic = random

        # How often the DistributedPubSubMediator should send out gossip information
        gossip-interval = 1s

        # Removed entries are pruned after this duration
        removed-time-to-live = 120s

        # Maximum number of elements to transfer in one tv.anypoint.jonathan.message when synchronizing the registries.
        # Next chunk will be transferred in next round of gossip.
        max-delta-elements = 3000

        # When a tv.anypoint.jonathan.message is published to a topic with no subscribers send it to the dead letters.
        send-to-dead-letters-when-no-subscribers = on

        # The id of the dispatcher to use for DistributedPubSubMediator actors.
        # If not specified default dispatcher is used.
        # If specified you need to define the settings of the actual dispatcher.
        use-dispatcher = ""
    }
  }
  extensions = ["akka.cluster.metrics.ClusterMetricsExtension",
                "akka.cluster.pubsub.DistributedPubSub"]
}
